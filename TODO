1. Replace driver includes with a special "START_DRIVER(x)" macro
    #define START_DRIVER(x) ##ifdef INCLUDE_x_DRIVER
    #define END_DRIVER() ##endif

2. Break drivers and platform directories into their platform subdirectories.
   Pass "platform" parameter to Makefile will determine which subdirectories it compiles.

    /
        /platform
            /arm_m7
            /stm32f7
                lcd_timings.h
                sdram_timings.h
            system.h
            system.c

Maybe have "SOC", "SOC-FAMILY" and "BOARD" parameters instead of just "platform"?

    /
        /drivers
            /stm32f7
                /stm32f746
                    lcd_ctrl.c
                    ethernet.c
                /stm32f722
                    idk_lol.c
                gpio.c
                fmc_sdram.c
                timers.c
                drivers_common_to_both.c
            /i2c
                drivers_that_talk_over_i2c.c
            /spi
                drivers_that_talk_over_spi.c
            spi.h <-- defines generic spi interface across SoCs
        /platform
            /arm_m7
            /stm32f7
                /stm32f746
                    lcd_timings.h
                    sdram_timings.h
                    gpio_pins.h
                /stm32f722
                    gpio_pins.h
            gpio_pins.h <-- #ifdef's the different architectures
            system.h
            system.c

3. Put files like "lcd_timings.h" into a special "config" folder
4. Put "SDRAM_ALT_FUNC" and similar into the .c file, not the header file.
5. Do I need the "INCLUDE_x_DRIVER" guards??? Helps with compile time, but still
6. Switch whitespace to tabs to indent, spaces to align.
7. Add default exception handlers that print useful information then infinite loop.
